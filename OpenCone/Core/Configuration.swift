import Foundation

/// Centralized configuration settings for the OpenCone application.
/// Reads sensitive keys from environment variables for better security practices.
struct Configuration {
    // MARK: - OpenAI Configuration
    
    /// OpenAI API Key retrieved from environment variables.
    static let openAIAPIKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] ?? ""
    /// The specific OpenAI model used for generating text embeddings.
    static let embeddingModel = "text-embedding-3-large"
    /// The expected dimension (size) of the vectors generated by the embedding model.
    static let embeddingDimension = 3072
    /// The specific OpenAI model used for generating completions or answers.
    static let completionModel = "gpt-4o"
    
    // MARK: - Pinecone Configuration
    
    /// Pinecone API Key retrieved from environment variables.
    static let pineconeAPIKey = ProcessInfo.processInfo.environment["PINECONE_API_KEY"] ?? ""
    /// Pinecone Project ID retrieved from environment variables, required for authentication.
    static let pineconeProjectId = ProcessInfo.processInfo.environment["PINECONE_PROJECT_ID"] ?? ""
    /// Default Pinecone environment/region to use.
    static let pineconeEnvironment = "us-east-1"
    
    // MARK: - Document Processing Settings
    
    /// Default size (in characters or tokens, depending on implementation) for text chunks.
    static let defaultChunkSize = 1024
    /// Default overlap size between consecutive text chunks to maintain context.
    static let defaultChunkOverlap = 256
    
    /// Maximum number of Pinecone indexes a user is allowed to create through the app.
    static let maxIndexes = 5
    
    /// Set of MIME types accepted for document processing, including text, documents, web, data, code, and images (for OCR).
    static let acceptedMimeTypes: Set<String> = [
        // Document formats
        "application/pdf", "text/plain",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document", // .docx
        "application/msword", // .doc
        
        // Web formats
        "text/html", "text/css",
        
        // Data formats
        "text/markdown", "application/json", "application/xml",
        "text/csv", "text/tsv", "text/rtf", "application/rtf",
        
        // Code formats
        "application/x-python", "text/x-python",
        "application/javascript", "text/javascript",
        
        // Image formats (for OCR)
        "image/png", "image/jpeg", "image/gif", "image/tiff", "image/bmp"
    ]
    
    /// Checks if a given MIME type is supported for processing.
    /// - Parameter mimeType: The MIME type string to check.
    /// - Returns: `true` if the MIME type is in the `acceptedMimeTypes` set, `false` otherwise.
    static func isMimeTypeSupported(_ mimeType: String) -> Bool {
        return acceptedMimeTypes.contains(mimeType)
    }
    
    // MARK: - API Key Management (Placeholder/Demo)
    // Note: In a production application, API keys should be securely stored and retrieved
    // using the Keychain service, not stored directly in code or UserDefaults.
    // These functions are placeholders demonstrating where such logic would reside.
    
    /// Retrieves the OpenAI API key. (Placeholder - Reads from static property).
    /// - Returns: The configured OpenAI API key.
    static func getOpenAIAPIKey() -> String {
        // Production implementation: Retrieve securely from Keychain.
        return openAIAPIKey
    }
    
    /// Retrieves the Pinecone API key. (Placeholder - Reads from static property).
    /// - Returns: The configured Pinecone API key.
    static func getPineconeAPIKey() -> String {
        // Production implementation: Retrieve securely from Keychain.
        return pineconeAPIKey
    }
    
    /// Retrieves the Pinecone Project ID. (Placeholder - Reads from static property).
    /// - Returns: The configured Pinecone Project ID.
    static func getPineconeProjectId() -> String {
        // Production implementation: Retrieve securely from Keychain.
        return pineconeProjectId
    }
    
    /// Saves the OpenAI API key. (Placeholder - Prints confirmation).
    /// - Parameter key: The OpenAI API key to save.
    static func saveOpenAIAPIKey(_ key: String) {
        // Production implementation: Save securely to Keychain.
        print("Placeholder: OpenAI API key saved (should use Keychain)")
    }
    
    /// Saves the Pinecone API key. (Placeholder - Prints confirmation).
    /// - Parameter key: The Pinecone API key to save.
    static func savePineconeAPIKey(_ key: String) {
        // Production implementation: Save securely to Keychain.
        print("Placeholder: Pinecone API key saved (should use Keychain)")
    }
    
    /// Saves the Pinecone Project ID. (Placeholder - Prints confirmation).
    /// - Parameter id: The Pinecone Project ID to save.
    static func savePineconeProjectId(_ id: String) {
        // Production implementation: Save securely to Keychain.
        print("Placeholder: Pinecone project ID saved (should use Keychain)")
    }
}